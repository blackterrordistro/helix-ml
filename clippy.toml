# Clippy configuration for HelixML

# Allow specific lints that are too noisy for our codebase
# Disable specific lints that don't fit our use case

# Allow some lints that are commonly triggered in ML code
allow = [
    "too_many_arguments",           # ML functions often have many parameters
    "type_complexity",             # Generic types can be complex
    "module_name_repetitions",     # Common in workspace structures
    "similar_names",               # Common in mathematical code
    "cast_precision_loss",         # Sometimes necessary for ML operations
    "cast_possible_truncation",    # Sometimes necessary for ML operations
    "float_cmp",                   # Common in ML for approximate equality
    "must_use_candidate",          # Many ML functions return results that should be used
]

# Set the minimum rust version for clippy
msrv = "1.70"

# Deny specific lints that are important for our codebase
deny = [
    "missing_docs_in_crate_items", # Require documentation
    "missing_debug_implementations", # Require Debug implementations
    "missing_copy_implementations",  # Require Copy where appropriate
    "unused_crate_dependencies",   # Clean up unused dependencies
    "unused_import_braces",        # Clean up imports
    "unused_qualifications",       # Clean up qualifications
    "unused_results",              # Don't ignore results
    "unreachable",                 # Catch unreachable code
    "panic",                       # Avoid panic in library code
    "todo",                        # Avoid TODO comments in production code
    "unimplemented",               # Avoid unimplemented in production code
    "unreachable_pub",             # Avoid unreachable public items
    "unsafe_code",                 # Be explicit about unsafe code
    "unused_unsafe",               # Don't use unnecessary unsafe
    "wildcard_dependencies",       # Be explicit about dependencies
]

# Configure specific lints
[clippy::all]
# Enable all clippy lints by default

[clippy::nursery]
# Enable nursery lints (experimental)

[clippy::pedantic]
# Enable pedantic lints

[clippy::cargo]
# Enable cargo-specific lints

[clippy::complexity]
# Enable complexity lints

[clippy::correctness]
# Enable correctness lints

[clippy::perf]
# Enable performance lints

[clippy::style]
# Enable style lints

[clippy::suspicious]
# Enable suspicious lints