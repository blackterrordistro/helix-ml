//! üåÄ HelixML Simple Example
//! 
//! –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ HelixML –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏.

use helix_ml::*;
use helix_ml::tensor::{TensorRandom, TensorOps, TensorActivation};

fn main() -> Result<()> {
    println!("üåÄ HelixML Simple Example");
    println!("=========================");
    
    // –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (CPU)
    let device = Device::cpu();
    println!("Device: {:?}", device);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    println!("\nCreating tensors:");
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä 2x3
    let a = CpuTensor::ones(Shape::new(vec![2, 3]), DType::F32, &device)?;
    println!("Tensor A shape: {:?}", a.shape());
    println!("Tensor A data: {:?}", a.data());
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä 2x3 (—Ç–∞–∫–æ–π –∂–µ —Ä–∞–∑–º–µ—Ä –∫–∞–∫ —É A)
    let b = CpuTensor::ones(Shape::new(vec![2, 3]), DType::F32, &device)?;
    println!("Tensor B shape: {:?}", b.shape());
    
    // –ü—Ä–æ—Å—Ç–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ
    println!("\nTensor operations:");
    let c = a.add(&b)?;
    println!("A + B shape: {:?}", c.shape());
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    let random_tensor = CpuTensor::random_uniform(
        Shape::new(vec![2, 2]), 
        0.0, 
        1.0, 
        &device
    )?;
    println!("Random tensor shape: {:?}", random_tensor.shape());
    println!("Random tensor data: {:?}", random_tensor.data());
    
    // –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    println!("\nMathematical operations:");
    let doubled = random_tensor.mul(&CpuTensor::ones(Shape::new(vec![2, 2]), DType::F32, &device)?)?;
    println!("Doubled tensor data: {:?}", doubled.data());
    
    let squared = random_tensor.mul(&random_tensor)?;
    println!("Squared tensor data: {:?}", squared.data());
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    println!("\nActivation functions:");
    let relu_result = random_tensor.relu()?;
    println!("ReLU result: {:?}", relu_result.data());
    
    let silu_result = random_tensor.silu()?;
    println!("SiLU result: {:?}", silu_result.data());
    
    println!("\n‚úÖ Example completed successfully!");
    
    Ok(())
}